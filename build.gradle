plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.polarbookshop'
version = '0.0.1'

java {
	sourceCompatibility = '20'
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2022.0.4")
	set('testcontainersVersion', '1.17.3')
	set('otelVersion', '1.31.0')
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
//	implementation 'io.micrometer:micrometer-tracing-bridge-otel:1.1.6'
//	implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.31.0'


	runtimeOnly 'io.github.resilience4j:resilience4j-micrometer'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"


//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
//	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	implementation 'org.springframework.session:spring-session-data-redis'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

bootBuildImage {
	imageName = "${project.name}"
	environment = ["BP_JVM_VERSION": "20.*"]

	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
